package com.qiantang.neighbourmother.ui.order.user;

import android.content.Intent;
import android.os.Message;
import android.text.TextUtils;
import android.view.View;
import android.widget.AdapterView;
import android.widget.RelativeLayout;

import com.qiantang.neighbourmother.R;
import com.qiantang.neighbourmother.adapter.UserOrderAdapter;
import com.qiantang.neighbourmother.business.API;
import com.qiantang.neighbourmother.business.data.UserDeleteOrderHttp;
import com.qiantang.neighbourmother.business.data.UserOrderListHttp;
import com.qiantang.neighbourmother.business.response.UserOrderListResp;
import com.qiantang.neighbourmother.ui.BaseActivity;
import com.qiantang.neighbourmother.ui.BaseFragment;
import com.qiantang.neighbourmother.ui.dialog.DeleteOrderDialog;
import com.qiantang.neighbourmother.ui.home.DownOrderActivity;
import com.qiantang.neighbourmother.util.AppLog;
import com.qiantang.neighbourmother.util.IntentFinal;
import com.qiantang.neighbourmother.util.ToastUtils;
import com.qiantang.neighbourmother.widget.refreshview.XListView;

import java.util.List;

/**
 * ClassName:用户订单，待支付
 * author: Cocoa
 * date: 2016/9/26.
 */
public class WaitPaymentFragment extends BaseFragment implements View.OnClickListener {

    private XListView               listview;//
    private UserOrderAdapter        orderAdapter;
    private List<UserOrderListResp> userOrderListResps;
    private boolean                 isRefresh;

    private RelativeLayout rl_default_page;

    @Override
    public int getContentView() {
        return R.layout.fragment_wait_payment;
    }

    @Override
    public void initView(View view) {
        listview = (XListView) view.findViewById(R.id.listview);
        rl_default_page = (RelativeLayout) view.findViewById(R.id.rl_default_page);
    }


    @Override
    public void initData() {
        orderAdapter = new UserOrderAdapter(getParentFragment().getActivity(), 3, handler);
        listview.setPullLoadEnable(false);
        listview.aotuRefreshComplete();
        listview.setAdapter(orderAdapter);

    }

    @Override
    public void onResume() {
//        OrderFragment.flag = true;
        super.onResume();
        if (isRefresh) getHttpData(true, true, 1);
    }

    private void getHttpData(boolean isFirst, boolean isShowProgress, int what) {
        isRefresh = false;
        int count = isFirst == true ? 0 : orderAdapter.getDataList().size();
        new UserOrderListHttp(getParentFragment().getActivity(), handler, API.USER_ORDER_LIST + "?status=" + 1 + "&count=" + API.COUNT + "&offset=" + count, what, isShowProgress);
    }

    @Override
    public void initEvent() {

        listview.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> adapterView, View view, int i, long l) {
                if (i <= 0) {
                    return;
                }
//                if (isDelete) {
//                    isDelete = false;
//                    orderAdapter.setDelete(isDelete);
//
//                    orderAdapter.notifyDataSetChanged();
//                } else {
                Intent intent = new Intent(getActivity(), DownOrderActivity.class);
                intent.putExtra(IntentFinal.INTENT_TO_DOWN_ORDER, 2);
                intent.putExtra(IntentFinal.INTENT_ORDER_ITEM_OBJ, orderAdapter.getDataList().get(i - 1));
                startActivityForResult(intent, 1);
//                }
//                OrderFragment.flag = true;
            }
        });
        listview.setXListViewListener(new XListView.IXListViewListener() {
            @Override
            public void onRefresh() {
//                isDelete = false;
//                OrderFragment.flag = true;
//                orderAdapter.setDelete(isDelete);
                getHttpData(true, false, 1);
            }

            @Override
            public void onLoadMore() {
//                isDelete = false;
//                OrderFragment.flag = true;
//                orderAdapter.setDelete(isDelete);
                getHttpData(false, false, 2);
            }
        });

        listview.setOnItemLongClickListener(new AdapterView.OnItemLongClickListener() {
            @Override
            public boolean onItemLongClick(AdapterView<?> parent, View view, int position, long id) {
                if (position > 0) {
                    showDialog(orderAdapter.getDataList().get(position - 1));
                    return true;
                } else {
                    return false;
                }
            }
        });
    }


    DeleteOrderDialog deleteOrderDialog;
    UserOrderListResp     oreder;

    private void showDialog(final UserOrderListResp userOrderListResp) {
        oreder = new UserOrderListResp();
        if (deleteOrderDialog == null) {
            deleteOrderDialog = new DeleteOrderDialog();
        }
        deleteOrderDialog.show(((BaseActivity) getParentFragment().getActivity()).getSupportFragmentManager(), "DeleteOrderDialog");
        deleteOrderDialog.setOnSureListener(new DeleteOrderDialog.DeleteOrderListener() {
            @Override
            public void onSure() {
                if (!TextUtils.isEmpty(userOrderListResp.getOrder_id())) {
                    oreder.setOrder_id(userOrderListResp.getOrder_id());
                    new UserDeleteOrderHttp(getParentFragment().getActivity(), handler, API.USER_ORDER_DELETE, userOrderListResp.getOrder_id(), 3, true);
                }
                deleteOrderDialog.dismiss();
            }

            @Override
            public void onCancel() {
                deleteOrderDialog.dismiss();
                ToastUtils.toastshort(getParentFragment().getActivity(), R.string.cancel_delete_order);
//                isDelete = false;
//                OrderFragment.flag = true;
//                notifyDataSetChanged();
            }
        });
    }

    @Override
    protected void clossRefresh() {
        super.clossRefresh();
        listview.aotuRefreshComplete();
//        isDelete = false;
//        OrderFragment.flag = true;
//        orderAdapter.setDelete(isDelete);
        orderAdapter.notifyDataSetChanged();

    }

    @Override
    protected void updateUI(Message msg) {
        switch (msg.what) {
            case 1:
                userOrderListResps = (List<UserOrderListResp>) msg.obj;
                setData(userOrderListResps, true);
                break;
            case 2:
                userOrderListResps = (List<UserOrderListResp>) msg.obj;
                setData(userOrderListResps, false);
                break;
            case 3:
                int pos = orderAdapter.getDataList().size();
                for (int i = 0; i < pos; i++) {
                    UserOrderListResp userOrderListResps = orderAdapter.getDataList().get(i);
                    if (oreder.getOrder_id().equals(userOrderListResps.getOrder_id())) {
                        orderAdapter.getDataList().remove(i);
                        break;
                    }
                }
//                isDelete = false;
//                OrderFragment.flag = true;
//                orderAdapter.setDelete(isDelete);
                orderAdapter.notifyDataSetChanged();
                ToastUtils.toastshort(getParentFragment().getActivity(), R.string.delete_order_success);
                break;
        }
        if (orderAdapter.getDataList() == null || orderAdapter.getDataList().size() <= 0) {
            rl_default_page.setVisibility(View.VISIBLE);
            listview.setVisibility(View.GONE);
        } else {
            rl_default_page.setVisibility(View.GONE);
            listview.setVisibility(View.VISIBLE);
        }
        closeProgressDialog();
    }

    private void setData(List<UserOrderListResp> userOrderListResps, boolean isFirst) {
        if (isFirst) {
            orderAdapter.getDataList().clear();
        }
        if (userOrderListResps != null && userOrderListResps.size() > 0) {
            orderAdapter.getDataList().addAll(userOrderListResps);
            if (userOrderListResps.size() < 10) {
                listview.setPullLoadEnable(false);
            } else {
                listview.setPullLoadEnable(true);
            }
        } else {
            ToastUtils.toastshort(getParentFragment().getActivity(), isFirst ? getString(R.string.app_pull_not_data) : getString(R.string.app_pull_already_last_page));
        }
        orderAdapter.notifyDataSetChanged();
        listview.aotuRefreshComplete();


    }

    @Override
    public void onClick(View view) {

    }

//
//    private boolean isDelete = false;
//
//    public void deleteItem(boolean isShow) {
//        if (isShow) {
//            isDelete = false;
//            orderAdapter.setDelete(isDelete);
//            orderAdapter.notifyDataSetChanged();
//        } else {
//            isDelete = true;
//            orderAdapter.setDelete(isDelete);
//            orderAdapter.notifyDataSetChanged();
//        }
//    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        AppLog.D("WaitPaymentFragment.onActivityResult.resultCode:" + resultCode);
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == OrderFragment.RESULT_CODE_REFRESH) {
            getHttpData(true, true, 1);
        }
    }

    public void setRefresh(boolean refresh) {
        isRefresh = refresh;
    }

}
