/**
 * 
 */
package com.qiantang.neighbourmother.widget.taglayout;

import android.content.Context;
import android.util.AttributeSet;
import android.view.View;


import com.qiantang.neighbourmother.R;
import com.qiantang.neighbourmother.logic.BbsTagUtil;
import com.qiantang.neighbourmother.util.AppLog;

import java.util.ArrayList;
import java.util.List;

/**
 * @author kince
 * @category ģ������Ӧ�õײ�tagview
 * 
 */
public class TagListView extends FlowLayout {

	private final List<Tag> mTags = new ArrayList<Tag>();
private BbsTagUtil bbsTagUtil=new BbsTagUtil();
	private boolean isUserCenter;
	/**
	 * @param context
	 */
	public TagListView(Context context) {
		super(context);
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param context
	 * @param attributeSet
	 */
	public TagListView(Context context, AttributeSet attributeSet) {
		super(context, attributeSet);
		// TODO Auto-generated constructor stub
	}

	/**
	 * @param context
	 * @param attributeSet
	 * @param defStyle
	 */
	public TagListView(Context context, AttributeSet attributeSet, int defStyle) {
		super(context, attributeSet, defStyle);
		// TODO Auto-generated constructor stub

	}

	private int alreadyPosition1=-1;
	private int alreadyPosition2=-1;
	private int alreadyPosition3=-1;
	private void inflateTagView(final Tag t,final int position) {

		TagView localTagView = (TagView) View.inflate(getContext(),
				R.layout.tag, null);

		bbsTagUtil.setViewDrawable(getContext(),localTagView,t.getColorlist());

		localTagView.setText(t.getTitle());
		localTagView.setTag(t);
		localTagView.setSelected(t.isChecked());
		localTagView.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View view) {
				if(isUserCenter){
					setUerCChooer(position);
				}else{
					setChooerLogic(position);
				}

			}
		});
		addView(localTagView);
	}

	public List<Tag> getmTags(){
		return mTags;
	}

	public void setTags(List<? extends Tag> lists) {
		removeAllViews();
		mTags.clear();

		for (int i = 0; i < lists.size(); i++) {
			Tag tag=lists.get(i);
			if(tag.isChecked())
				alreadyPosition3=i;
			mTags.add(tag);
			inflateTagView(tag,i);
		}
	}

	private void setUerCChooer(int position){
		Tag tag=mTags.get(position);
		boolean b=!tag.isChecked();
		tag.setChecked(b);
		((TagView) getChildAt(position)).setSelected(b);
		AppLog.D("positionposition:"+b);


	}

	private void setChooerLogic(int position){
		Tag tag=mTags.get(position);
		if(!tag.isChecked()){
			if(alreadyPosition1!=-1){

				((TagView) getChildAt(alreadyPosition1)).setSelected(false);
				mTags.get(alreadyPosition1).setChecked(false);

				((TagView) getChildAt(position)).setSelected(true);
				mTags.get(position).setChecked(true);

				alreadyPosition1=alreadyPosition2;
				alreadyPosition2=alreadyPosition3;
				alreadyPosition3=position;
			}else{
				alreadyPosition1=alreadyPosition2;
				alreadyPosition2=alreadyPosition3;
				alreadyPosition3=position;
				((TagView) getChildAt(alreadyPosition3)).setSelected(true);
				mTags.get(alreadyPosition3).setChecked(true);
			}
		}else{

			if(position==alreadyPosition1){
				if(alreadyPosition2!=-1||alreadyPosition3!=-1){
					((TagView) getChildAt(position)).setSelected(false);
					mTags.get(position).setChecked(false);
					alreadyPosition1=-1;
				}

			}else if(position==alreadyPosition2){
				if(alreadyPosition1!=-1||alreadyPosition3!=-1) {

					((TagView) getChildAt(position)).setSelected(false);
					mTags.get(position).setChecked(false);

					if (alreadyPosition1 == -1)
						alreadyPosition2 = -1;
					else {
						alreadyPosition2 = alreadyPosition1;
						alreadyPosition1 = -1;
					}
				}
			}else if(position==alreadyPosition3){
				if(alreadyPosition1!=-1||alreadyPosition2!=-1) {

					((TagView) getChildAt(position)).setSelected(false);
					mTags.get(position).setChecked(false);

					if(alreadyPosition1!=-1&&alreadyPosition2!=-1){
						alreadyPosition3=alreadyPosition2;
						alreadyPosition2=alreadyPosition1;
						alreadyPosition1=-1;
					}else if(alreadyPosition1!=-1){
						alreadyPosition3=alreadyPosition1;
						alreadyPosition1=-1;
						alreadyPosition2=-1;
					}else if(alreadyPosition2!=-1){
						alreadyPosition3=alreadyPosition2;
						alreadyPosition1=-1;
						alreadyPosition2=-1;
					}
				}
			}
		}
	}

	public boolean isUserCenter() {
		return isUserCenter;
	}

	public void setIsUserCenter(boolean isUserCenter) {
		this.isUserCenter = isUserCenter;
	}

//	private void setViewDrawable(TagView localTagView,int[] colorList){
//		StateListDrawable drawable = new StateListDrawable();
//
//		GradientDrawable gradientDrawable_press=new GradientDrawable();
//		gradientDrawable_press.setColor(colorList[0]);
//		gradientDrawable_press.setCornerRadius(QLScreenUtil.dpToPx(getContext(), 3f));
//
//		GradientDrawable gradientDrawable_normal=new GradientDrawable();
//		gradientDrawable_normal.setColor(colorList[1]);
//		gradientDrawable_normal.setCornerRadius(QLScreenUtil.dpToPx(getContext(), 3f));
//
//		drawable.addState(new int[]{-android.R.attr.state_selected}, gradientDrawable_press);
//		drawable.addState(new int[]{-android.R.attr.state_empty}, gradientDrawable_normal);
//
//		localTagView.setBackground(drawable);
//
//		ColorStateList colorStateList=new ColorStateList(new int[][]{new int[]{-android.R.attr.state_empty}},new int[]{getResources().getColor(R.color.white)});
//
//		localTagView.setTextColor(colorStateList);
//	}
}
