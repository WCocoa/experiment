package com.qiantang.neighbourmother;/*
 * The MIT License (MIT)
 *
 * Copyright � 2013 Clover Studio Ltd. All rights reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */


import android.app.Application;
import android.content.pm.PackageManager;

import com.baidu.mapapi.SDKInitializer;
import com.nostra13.universalimageloader.cache.disc.impl.UnlimitedDiskCache;
import com.nostra13.universalimageloader.cache.disc.naming.HashCodeFileNameGenerator;
import com.nostra13.universalimageloader.cache.memory.impl.LruMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.nostra13.universalimageloader.core.decode.BaseImageDecoder;
import com.nostra13.universalimageloader.core.download.BaseImageDownloader;
import com.qiantang.neighbourmother.business.qlhttp.OKHttp;
import com.qiantang.neighbourmother.logic.LocationInfo;
import com.qiantang.neighbourmother.model.CityObj;
import com.qiantang.neighbourmother.model.LocInfoObj;
import com.qiantang.neighbourmother.model.PProvinceObj;
import com.qiantang.neighbourmother.sqlite.CityOperation;
import com.qiantang.neighbourmother.util.AppLog;
import com.qiantang.neighbourmother.util.FileFinal;
import com.qiantang.neighbourmother.widget.AuthImageDownloader;

import java.io.File;

/**
 * ************************************************************************
 * **                              _oo0oo_                               **
 * **                             o8888888o                              **
 * **                             88" . "88                              **
 * **                             (| -_- |)                              **
 * **                             0\  =  /0                              **
 * **                           ___/'---'\___                            **
 * **                        .' \\\|     |// '.                          **
 * **                       / \\\|||  :  |||// \\                        **
 * **                      / _ ||||| -:- |||||- \\                       **
 * **                      | |  \\\\  -  /// |   |                       **
 * **                      | \_|  ''\---/''  |_/ |                       **
 * **                      \  .-\__  '-'  __/-.  /                       **
 * **                    ___'. .'  /--.--\  '. .'___                     **
 * **                 ."" '<  '.___\_<|>_/___.' >'  "".                  **
 * **                | | : '-  \'.;'\ _ /';.'/ - ' : | |                 **
 * **                \  \ '_.   \_ __\ /__ _/   .-' /  /                 **
 * **            ====='-.____'.___ \_____/___.-'____.-'=====             **
 * **                              '=---='                               **
 * ************************************************************************
 * **                        佛祖保佑      镇类之宝                        **
 * ************************************************************************
 *
 * @since 2014-09-05 11:49
 */
public class NeighbourMotherApplication extends Application {
    public static int versionCode;

    public LocInfoObj locInfoObj;
    public LocInfoObj cur_locInfoObj;
    private CityOperation cityOperation;

    @Override
    public void
    onCreate() {
        super.onCreate();
        SDKInitializer.initialize(getApplicationContext());
        initLocation();
        FileFinal.createAppDirectory();
        ImageLoader.getInstance().init(getImgConfig());
        getVersionInfo();
        OKHttp.init(getApplicationContext());

    }

    private void getVersionInfo() {
        try {
            versionCode = this.getPackageManager().getPackageInfo(
                    this.getPackageName(), 0).versionCode;
        } catch (PackageManager.NameNotFoundException e) {
            e.printStackTrace();
        }
    }

    public ImageLoaderConfiguration getImgConfig() {
        ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(
                this)
                .taskExecutor(null)
                .taskExecutorForCachedImages(null)
                .threadPoolSize(5)
                // default
                .threadPriority(Thread.NORM_PRIORITY - 1)
                // default
                .tasksProcessingOrder(QueueProcessingType.LIFO)
                // default
                .denyCacheImageMultipleSizesInMemory()
                .memoryCache(new LruMemoryCache(10 * 1024 * 1024))
                .memoryCacheSize(10 * 1024)
                .memoryCacheSizePercentage(5)
                // default
                .diskCache(
                        new UnlimitedDiskCache(
                                new File(FileFinal.PATH_CACHEIMG)))
                // default
                .diskCacheSize(100 * 1024 * 1024).diskCacheFileCount(500)
                .diskCacheFileNameGenerator(new HashCodeFileNameGenerator()) // default
//                .imageDownloader(new BaseImageDownloader(this)) // default
                .imageDownloader(new AuthImageDownloader(this)) // default
                .imageDecoder(new BaseImageDecoder(true)) // default
                .defaultDisplayImageOptions(DisplayImageOptions.createSimple()) // default
                .writeDebugLogs().build();
        return config;
    }

    private void initLocation() {

        locInfoObj = getLocInfoObj(getString(R.string.default_show_province), getString(R.string.default_show_city));
        LocationInfo locationInfo = LocationInfo.getInstance();
        locationInfo.initLocation(this);
        locationInfo.setOnLocation(new LocationInfo.LocationLisenter() {
            @Override
            public void loc(String provice, String city, String district, double longitude, double latitude) {
                AppLog.D("定位城市：" + provice + "," + city + "," + district);
                locInfoObj = getLocInfoObj(provice.substring(0, provice.length() - 1), city);
                if (cur_locInfoObj == null)
                    cur_locInfoObj = locInfoObj;
            }
        });
    }

    private LocInfoObj getLocInfoObj(String provinceName, String cityName) {
        AppLog.D("provinceName:" + provinceName);
        AppLog.D("cityName:" + cityName);
        LocInfoObj locInfoObj = null;

        if (cityOperation == null)
            cityOperation = new CityOperation(getApplicationContext());
        PProvinceObj pProvinceObj = cityOperation.getProvinceId(provinceName);
        CityObj cityObj = cityOperation.getCityId(cityName);

        if (pProvinceObj == null || cityObj == null)
            return getLocInfoObj(getString(R.string.default_show_province), getString(R.string.default_show_city));

        locInfoObj = new LocInfoObj();
        locInfoObj.setProvince_id(pProvinceObj.getAreaId());
        locInfoObj.setProvince_name(pProvinceObj.getAreaName());
        locInfoObj.setCity_id(cityObj.get_id());
        locInfoObj.setCity_name(cityObj.getName());

        return locInfoObj;
    }

    public void getAppCurrLoc() {
        cur_locInfoObj = getLocInfoObj(getString(R.string.default_show_province), getString(R.string.default_show_city));
    }

}

